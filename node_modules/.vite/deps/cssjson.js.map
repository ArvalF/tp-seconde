{
  "version": 3,
  "sources": ["../../cssjson/cssjson.js"],
  "sourcesContent": ["/**\r\n * CSS-JSON Converter for JavaScript\r\n * Converts CSS to JSON and back.\r\n * Version 2.1\r\n *\r\n * Released under the MIT license.\r\n *\r\n * Copyright (c) 2013 Aram Kocharyan, http://aramk.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\n documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\r\n the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\r\n to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in all copies or substantial portions\r\n of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\r\n THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *  UMD pattern for exporting module\r\n */\r\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define([], factory);\r\n    } else if (typeof exports === 'object') {\r\n        // Node. Does not work with strict CommonJS, but\r\n        // only CommonJS-like environments that support module.exports,\r\n        // like Node.\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals (root is window)\r\n        root.CSSJSON = factory();\r\n  }\r\n}(this, function () {\r\n\r\n    var CSSJSON = new function () {\r\n\r\n        var base = this;\r\n\r\n        base.init = function () {\r\n            // String functions\r\n            String.prototype.trim = function () {\r\n                return this.replace(/^\\s+|\\s+$/g, '');\r\n            };\r\n\r\n            String.prototype.repeat = function (n) {\r\n                return new Array(1 + n).join(this);\r\n            };\r\n        };\r\n        base.init();\r\n\r\n        var selX = /([^\\s\\;\\{\\}][^\\;\\{\\}]*)\\{/g;\r\n        var endX = /\\}/g;\r\n        var lineX = /([^\\;\\{\\}]*)\\;/g;\r\n        var commentX = /\\/\\*[\\s\\S]*?\\*\\//g;\r\n        var lineAttrX = /([^\\:]+):([^\\;]*);/;\r\n\r\n        // This is used, a concatenation of all above. We use alternation to\r\n        // capture.\r\n        var altX = /(\\/\\*[\\s\\S]*?\\*\\/)|([^\\s\\;\\{\\}][^\\;\\{\\}]*(?=\\{))|(\\})|([^\\;\\{\\}]+\\;(?!\\s*\\*\\/))/gmi;\r\n\r\n        // Capture groups\r\n        var capComment = 1;\r\n        var capSelector = 2;\r\n        var capEnd = 3;\r\n        var capAttr = 4;\r\n\r\n        var isEmpty = function (x) {\r\n            return typeof x == 'undefined' || x.length == 0 || x == null;\r\n        };\r\n\r\n        /**\r\n         * Input is css string and current pos, returns JSON object\r\n         *\r\n         * @param cssString\r\n         *            The CSS string.\r\n         * @param args\r\n         *            An optional argument object. ordered: Whether order of\r\n         *            comments and other nodes should be kept in the output. This\r\n         *            will return an object where all the keys are numbers and the\r\n         *            values are objects containing \"name\" and \"value\" keys for each\r\n         *            node. comments: Whether to capture comments. split: Whether to\r\n         *            split each comma separated list of selectors.\r\n         */\r\n        base.toJSON = function (cssString, args) {\r\n            var node = {\r\n                children: {},\r\n                attributes: {}\r\n            };\r\n            var match = null;\r\n            var count = 0;\r\n\r\n            if (typeof args == 'undefined') {\r\n                var args = {\r\n                    ordered: false,\r\n                    comments: false,\r\n                    stripComments: false,\r\n                    split: false\r\n                };\r\n            }\r\n            if (args.stripComments) {\r\n                args.comments = false;\r\n                cssString = cssString.replace(commentX, '');\r\n            }\r\n\r\n            while ((match = altX.exec(cssString)) != null) {\r\n                if (!isEmpty(match[capComment]) && args.comments) {\r\n                    // Comment\r\n                    var add = match[capComment].trim();\r\n                    node[count++] = add;\r\n                } else if (!isEmpty(match[capSelector])) {\r\n                    // New node, we recurse\r\n                    var name = match[capSelector].trim();\r\n                    // This will return when we encounter a closing brace\r\n                    var newNode = base.toJSON(cssString, args);\r\n                    if (args.ordered) {\r\n                        var obj = {};\r\n                        obj['name'] = name;\r\n                        obj['value'] = newNode;\r\n                        // Since we must use key as index to keep order and not\r\n                        // name, this will differentiate between a Rule Node and an\r\n                        // Attribute, since both contain a name and value pair.\r\n                        obj['type'] = 'rule';\r\n                        node[count++] = obj;\r\n                    } else {\r\n                        if (args.split) {\r\n                            var bits = name.split(',');\r\n                        } else {\r\n                            var bits = [name];\r\n                        }\r\n                        for (i in bits) {\r\n                            var sel = bits[i].trim();\r\n                            if (sel in node.children) {\r\n                                for (var att in newNode.attributes) {\r\n                                    node.children[sel].attributes[att] = newNode.attributes[att];\r\n                                }\r\n                            } else {\r\n                                node.children[sel] = newNode;\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (!isEmpty(match[capEnd])) {\r\n                    // Node has finished\r\n                    return node;\r\n                } else if (!isEmpty(match[capAttr])) {\r\n                    var line = match[capAttr].trim();\r\n                    var attr = lineAttrX.exec(line);\r\n                    if (attr) {\r\n                        // Attribute\r\n                        var name = attr[1].trim();\r\n                        var value = attr[2].trim();\r\n                        if (args.ordered) {\r\n                            var obj = {};\r\n                            obj['name'] = name;\r\n                            obj['value'] = value;\r\n                            obj['type'] = 'attr';\r\n                            node[count++] = obj;\r\n                        } else {\r\n                            if (name in node.attributes) {\r\n                                var currVal = node.attributes[name];\r\n                                if (!(currVal instanceof Array)) {\r\n                                    node.attributes[name] = [currVal];\r\n                                }\r\n                                node.attributes[name].push(value);\r\n                            } else {\r\n                                node.attributes[name] = value;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // Semicolon terminated line\r\n                        node[count++] = line;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return node;\r\n        };\r\n\r\n        /**\r\n         * @param node\r\n         *            A JSON node.\r\n         * @param depth\r\n         *            The depth of the current node; used for indentation and\r\n         *            optional.\r\n         * @param breaks\r\n         *            Whether to add line breaks in the output.\r\n         */\r\n        base.toCSS = function (node, depth, breaks) {\r\n            var cssString = '';\r\n            if (typeof depth == 'undefined') {\r\n                depth = 0;\r\n            }\r\n            if (typeof breaks == 'undefined') {\r\n                breaks = false;\r\n            }\r\n            if (node.attributes) {\r\n                for (i in node.attributes) {\r\n                    var att = node.attributes[i];\r\n                    if (att instanceof Array) {\r\n                        for (var j = 0; j < att.length; j++) {\r\n                            cssString += strAttr(i, att[j], depth);\r\n                        }\r\n                    } else {\r\n                        cssString += strAttr(i, att, depth);\r\n                    }\r\n                }\r\n            }\r\n            if (node.children) {\r\n                var first = true;\r\n                for (i in node.children) {\r\n                    if (breaks && !first) {\r\n                        cssString += '\\n';\r\n                    } else {\r\n                        first = false;\r\n                    }\r\n                    cssString += strNode(i, node.children[i], depth);\r\n                }\r\n            }\r\n            return cssString;\r\n        };\r\n\r\n        // Helpers\r\n\r\n        var strAttr = function (name, value, depth) {\r\n            return '\\t'.repeat(depth) + name + ': ' + value + ';\\n';\r\n        };\r\n\r\n        var strNode = function (name, value, depth) {\r\n            var cssString = '\\t'.repeat(depth) + name + ' {\\n';\r\n            cssString += base.toCSS(value, depth + 1);\r\n            cssString += '\\t'.repeat(depth) + '}\\n';\r\n            return cssString;\r\n        };\r\n\r\n    };\r\n\r\n    return CSSJSON;\r\n}));\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AA4BA,KAAC,SAAU,MAAM,SAAS;AACtB,UAAI,OAAO,WAAW,cAAc,OAAO,KAAK;AAE5C,eAAO,CAAC,GAAG,OAAO;AAAA,MACtB,WAAW,OAAO,YAAY,UAAU;AAIpC,eAAO,UAAU,QAAQ;AAAA,MAC7B,OAAO;AAEH,aAAK,UAAU,QAAQ;AAAA,MAC7B;AAAA,IACF,GAAE,SAAM,WAAY;AAEhB,UAAI,UAAU,IAAI,WAAY;AAE1B,YAAI,OAAO;AAEX,aAAK,OAAO,WAAY;AAEpB,iBAAO,UAAU,OAAO,WAAY;AAChC,mBAAO,KAAK,QAAQ,cAAc,EAAE;AAAA,UACxC;AAEA,iBAAO,UAAU,SAAS,SAAU,GAAG;AACnC,mBAAO,IAAI,MAAM,IAAI,CAAC,EAAE,KAAK,IAAI;AAAA,UACrC;AAAA,QACJ;AACA,aAAK,KAAK;AAEV,YAAI,OAAO;AACX,YAAI,OAAO;AACX,YAAI,QAAQ;AACZ,YAAI,WAAW;AACf,YAAI,YAAY;AAIhB,YAAI,OAAO;AAGX,YAAI,aAAa;AACjB,YAAI,cAAc;AAClB,YAAI,SAAS;AACb,YAAI,UAAU;AAEd,YAAI,UAAU,SAAU,GAAG;AACvB,iBAAO,OAAO,KAAK,eAAe,EAAE,UAAU,KAAK,KAAK;AAAA,QAC5D;AAeA,aAAK,SAAS,SAAU,WAAW,MAAM;AACrC,cAAI,OAAO;AAAA,YACP,UAAU,CAAC;AAAA,YACX,YAAY,CAAC;AAAA,UACjB;AACA,cAAI,QAAQ;AACZ,cAAI,QAAQ;AAEZ,cAAI,OAAO,QAAQ,aAAa;AAC5B,gBAAI,OAAO;AAAA,cACP,SAAS;AAAA,cACT,UAAU;AAAA,cACV,eAAe;AAAA,cACf,OAAO;AAAA,YACX;AAAA,UACJ;AACA,cAAI,KAAK,eAAe;AACpB,iBAAK,WAAW;AAChB,wBAAY,UAAU,QAAQ,UAAU,EAAE;AAAA,UAC9C;AAEA,kBAAQ,QAAQ,KAAK,KAAK,SAAS,MAAM,MAAM;AAC3C,gBAAI,CAAC,QAAQ,MAAM,UAAU,CAAC,KAAK,KAAK,UAAU;AAE9C,kBAAI,MAAM,MAAM,UAAU,EAAE,KAAK;AACjC,mBAAK,OAAO,IAAI;AAAA,YACpB,WAAW,CAAC,QAAQ,MAAM,WAAW,CAAC,GAAG;AAErC,kBAAI,OAAO,MAAM,WAAW,EAAE,KAAK;AAEnC,kBAAI,UAAU,KAAK,OAAO,WAAW,IAAI;AACzC,kBAAI,KAAK,SAAS;AACd,oBAAI,MAAM,CAAC;AACX,oBAAI,MAAM,IAAI;AACd,oBAAI,OAAO,IAAI;AAIf,oBAAI,MAAM,IAAI;AACd,qBAAK,OAAO,IAAI;AAAA,cACpB,OAAO;AACH,oBAAI,KAAK,OAAO;AACZ,sBAAI,OAAO,KAAK,MAAM,GAAG;AAAA,gBAC7B,OAAO;AACH,sBAAI,OAAO,CAAC,IAAI;AAAA,gBACpB;AACA,qBAAK,KAAK,MAAM;AACZ,sBAAI,MAAM,KAAK,CAAC,EAAE,KAAK;AACvB,sBAAI,OAAO,KAAK,UAAU;AACtB,6BAAS,OAAO,QAAQ,YAAY;AAChC,2BAAK,SAAS,GAAG,EAAE,WAAW,GAAG,IAAI,QAAQ,WAAW,GAAG;AAAA,oBAC/D;AAAA,kBACJ,OAAO;AACH,yBAAK,SAAS,GAAG,IAAI;AAAA,kBACzB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ,WAAW,CAAC,QAAQ,MAAM,MAAM,CAAC,GAAG;AAEhC,qBAAO;AAAA,YACX,WAAW,CAAC,QAAQ,MAAM,OAAO,CAAC,GAAG;AACjC,kBAAI,OAAO,MAAM,OAAO,EAAE,KAAK;AAC/B,kBAAI,OAAO,UAAU,KAAK,IAAI;AAC9B,kBAAI,MAAM;AAEN,oBAAI,OAAO,KAAK,CAAC,EAAE,KAAK;AACxB,oBAAI,QAAQ,KAAK,CAAC,EAAE,KAAK;AACzB,oBAAI,KAAK,SAAS;AACd,sBAAI,MAAM,CAAC;AACX,sBAAI,MAAM,IAAI;AACd,sBAAI,OAAO,IAAI;AACf,sBAAI,MAAM,IAAI;AACd,uBAAK,OAAO,IAAI;AAAA,gBACpB,OAAO;AACH,sBAAI,QAAQ,KAAK,YAAY;AACzB,wBAAI,UAAU,KAAK,WAAW,IAAI;AAClC,wBAAI,EAAE,mBAAmB,QAAQ;AAC7B,2BAAK,WAAW,IAAI,IAAI,CAAC,OAAO;AAAA,oBACpC;AACA,yBAAK,WAAW,IAAI,EAAE,KAAK,KAAK;AAAA,kBACpC,OAAO;AACH,yBAAK,WAAW,IAAI,IAAI;AAAA,kBAC5B;AAAA,gBACJ;AAAA,cACJ,OAAO;AAEH,qBAAK,OAAO,IAAI;AAAA,cACpB;AAAA,YACJ;AAAA,UACJ;AAEA,iBAAO;AAAA,QACX;AAWA,aAAK,QAAQ,SAAU,MAAM,OAAO,QAAQ;AACxC,cAAI,YAAY;AAChB,cAAI,OAAO,SAAS,aAAa;AAC7B,oBAAQ;AAAA,UACZ;AACA,cAAI,OAAO,UAAU,aAAa;AAC9B,qBAAS;AAAA,UACb;AACA,cAAI,KAAK,YAAY;AACjB,iBAAK,KAAK,KAAK,YAAY;AACvB,kBAAI,MAAM,KAAK,WAAW,CAAC;AAC3B,kBAAI,eAAe,OAAO;AACtB,yBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,+BAAa,QAAQ,GAAG,IAAI,CAAC,GAAG,KAAK;AAAA,gBACzC;AAAA,cACJ,OAAO;AACH,6BAAa,QAAQ,GAAG,KAAK,KAAK;AAAA,cACtC;AAAA,YACJ;AAAA,UACJ;AACA,cAAI,KAAK,UAAU;AACf,gBAAI,QAAQ;AACZ,iBAAK,KAAK,KAAK,UAAU;AACrB,kBAAI,UAAU,CAAC,OAAO;AAClB,6BAAa;AAAA,cACjB,OAAO;AACH,wBAAQ;AAAA,cACZ;AACA,2BAAa,QAAQ,GAAG,KAAK,SAAS,CAAC,GAAG,KAAK;AAAA,YACnD;AAAA,UACJ;AACA,iBAAO;AAAA,QACX;AAIA,YAAI,UAAU,SAAU,MAAM,OAAO,OAAO;AACxC,iBAAO,IAAK,OAAO,KAAK,IAAI,OAAO,OAAO,QAAQ;AAAA,QACtD;AAEA,YAAI,UAAU,SAAU,MAAM,OAAO,OAAO;AACxC,cAAI,YAAY,IAAK,OAAO,KAAK,IAAI,OAAO;AAC5C,uBAAa,KAAK,MAAM,OAAO,QAAQ,CAAC;AACxC,uBAAa,IAAK,OAAO,KAAK,IAAI;AAClC,iBAAO;AAAA,QACX;AAAA,MAEJ;AAEA,aAAO;AAAA,IACX,CAAC;AAAA;AAAA;",
  "names": []
}
